/* Generated by AN DISI Unibo */ 
package it.unibo.lgv0;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractLgv0 extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractLgv0(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/lgv0/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");		
			this.planFilePath = "./srcMore/it/unibo/lgv0/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("lgvIdle",lgvIdle);
	    	stateTab.put("handlelgvReadyQuery",handlelgvReadyQuery);
	    	stateTab.put("handlelgvloadcmd",handlelgvloadcmd);
	    	stateTab.put("movingToSource",movingToSource);
	    	stateTab.put("movingToLoadEnd",movingToLoadEnd);
	    	stateTab.put("handlelgvmovetodest",handlelgvmovetodest);
	    	stateTab.put("movingToDest",movingToDest);
	    	stateTab.put("movingToDestEnd",movingToDestEnd);
	    	stateTab.put("gotoDeposit",gotoDeposit);
	    	stateTab.put("movingToDeposit",movingToDeposit);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "lgv0 tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	it.e80.customGui.createCustomGui( this ,"400", "30", "500", "cyan"  );
	    	//switchTo lgvIdle
	        switchToPlanAsNextState(pr, myselfName, "lgv0_"+myselfName, 
	              "lgvIdle",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun lgvIdle = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("lgvIdle",-1);
	    	String myselfName = "lgvIdle";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?lgvId(LGV)" )) != null ){
	    	temporaryStr = "info(\"STATE\",LGV,\"IDLE\")";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"lgv0_"+myselfName,false,
	          new StateFun[]{stateTab.get("handlelgvReadyQuery") },//new StateFun[]
	          new String[]{"true","M","lgvReady" },
	          100000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_lgvIdle){  
	    	 println( getName() + " plan=lgvIdle WARNING:" + e_lgvIdle.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//lgvIdle
	    
	    StateFun handlelgvReadyQuery = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handlelgvReadyQuery",-1);
	    	String myselfName = "handlelgvReadyQuery";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?lgvId(LGV)" )) != null ){
	    	//onMsg 
	    	curT = Term.createTerm("lgvReady(SOURCE,LGV,query)");
	    	if( currentMessage != null && currentMessage.msgId().equals("lgvReady") && 
	    		pengine.unify(curT, Term.createTerm("lgvReady(SOURCE,LGV,V)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="lgvReady(SOURCE,LGV,true)";
	    		parg = updateVars( Term.createTerm("lgvReady(SOURCE,LGV,V)"),  Term.createTerm("lgvReady(SOURCE,LGV,query)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) replyToCaller("lgvReady", parg);
	    	}
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"lgv0_"+myselfName,false,
	          new StateFun[]{stateTab.get("handlelgvloadcmd") },//new StateFun[]
	          new String[]{"true","M","lgvMoveLoad" },
	          10000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_handlelgvReadyQuery){  
	    	 println( getName() + " plan=handlelgvReadyQuery WARNING:" + e_handlelgvReadyQuery.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handlelgvReadyQuery
	    
	    StateFun handlelgvloadcmd = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handlelgvloadcmd",-1);
	    	String myselfName = "handlelgvloadcmd";  
	    	temporaryStr = "\"LGV MUST MOVE FROM DEPOSIT TO SOURCE \"";
	    	println( temporaryStr );  
	    	memoCurrentMessage( false );
	    	parg = "simulateActionAsynch(\"simulateMoveToSource\",1000)"; 
	    	actorOpExecute(parg, false);	//OCT17		 
	    	//switchTo movingToSource
	        switchToPlanAsNextState(pr, myselfName, "lgv0_"+myselfName, 
	              "movingToSource",false, false, null); 
	    }catch(Exception e_handlelgvloadcmd){  
	    	 println( getName() + " plan=handlelgvloadcmd WARNING:" + e_handlelgvloadcmd.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handlelgvloadcmd
	    
	    StateFun movingToSource = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_movingToSource",0);
	     pr.incNumIter(); 	
	    	String myselfName = "movingToSource";  
	    	temporaryStr = "\"	LGV IS MOVING FROM DEPOSIT TO SOURCE \"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"lgv0_"+myselfName,false,
	          new StateFun[]{
	          () -> {	//AD HOC state to execute an action and resumeLastPlan
	          try{
	            PlanRepeat pr1 = PlanRepeat.setUp("adhocstate",-1);
	            //ActionSwitch for a message or event
	             if( currentMessage.msgContent().startsWith("lgvReady") ){
	            	/* SwitchTransition */
	            	String parg = "lgvIdle";
	            	parg =  updateVars( Term.createTerm("lgvReady(SOURCE,LGV,V)"), 
	            		                Term.createTerm("lgvReady(SOURCE,LGV,reset)"), 
	            		                Term.createTerm(currentMessage.msgContent()), parg);
	            	if(parg != null){ 
	            		switchToPlanAsNextState(pr, myselfName, "console_"+myselfName, 
	            	    	 		    		parg,false, true, null); 
	            	    return;	
	            	    //the control is given to the caller state
	            	}
	             }
	            repeatPlanNoTransition(pr1,"adhocstate","adhocstate",false,true);
	          }catch(Exception e ){  
	             println( getName() + " plan=movingToSource WARNING:" + e.getMessage() );
	             //QActorContext.terminateQActorSystem(this); 
	          }
	          },
	           
	          () -> {	//AD HOC state to execute an action and resumeLastPlan
	          try{
	            PlanRepeat pr1 = PlanRepeat.setUp("adhocstate",-1);
	            //ActionSwitch for a message or event
	             if( currentMessage.msgContent().startsWith("lgvReady") ){
	            	String parg="lgvReady(SOURCE,LGV,false)";
	            	/* ReplyToCaller */
	            	parg = updateVars( Term.createTerm("lgvReady(SOURCE,LGV,V)"),  Term.createTerm("lgvReady(SOURCE,LGV,query)"), 
	            		    		  					Term.createTerm(currentMessage.msgContent()), parg);
	            	if( parg != null ) replyToCaller("lgvReady", parg);
	             }
	            repeatPlanNoTransition(pr1,"adhocstate","adhocstate",false,true);
	          }catch(Exception e ){  
	             println( getName() + " plan=movingToSource WARNING:" + e.getMessage() );
	             //QActorContext.terminateQActorSystem(this); 
	          }
	          },
	           stateTab.get("movingToLoadEnd") },//new StateFun[]
	          new String[]{"true","M","lgvReady", "true","M","lgvReady", "true","M","endAction" },
	          100000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_movingToSource){  
	    	 println( getName() + " plan=movingToSource WARNING:" + e_movingToSource.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//movingToSource
	    
	    StateFun movingToLoadEnd = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("movingToLoadEnd",-1);
	    	String myselfName = "movingToLoadEnd";  
	    	temporaryStr = "\"LGV HAS REACHED THE  SOURCE \"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??msg(A,B,SENDER,D,lgvMoveLoad(LGV,SOURCE),F)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"lgvLoaded(LGV,SOURCE,MATERIAL)","lgvLoaded(LGV,SOURCE,material)", guardVars ).toString();
	    	sendMsg("lgvLoaded",guardVars.get("SENDER"), QActorContext.dispatch, temporaryStr ); 
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"lgv0_"+myselfName,false,
	          new StateFun[]{stateTab.get("handlelgvmovetodest") },//new StateFun[]
	          new String[]{"true","M","lgvMoveWhareh" },
	          100000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_movingToLoadEnd){  
	    	 println( getName() + " plan=movingToLoadEnd WARNING:" + e_movingToLoadEnd.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//movingToLoadEnd
	    
	    StateFun handlelgvmovetodest = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handlelgvmovetodest",-1);
	    	String myselfName = "handlelgvmovetodest";  
	    	temporaryStr = "\"LGV MIUST MOVE TO THE WHAREHOUSE\"";
	    	println( temporaryStr );  
	    	memoCurrentMessage( false );
	    	parg = "simulateActionAsynch(\"simulateMoveToDest\",1000)"; 
	    	actorOpExecute(parg, false);	//OCT17		 
	    	//switchTo movingToDest
	        switchToPlanAsNextState(pr, myselfName, "lgv0_"+myselfName, 
	              "movingToDest",false, false, null); 
	    }catch(Exception e_handlelgvmovetodest){  
	    	 println( getName() + " plan=handlelgvmovetodest WARNING:" + e_handlelgvmovetodest.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handlelgvmovetodest
	    
	    StateFun movingToDest = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_movingToDest",0);
	     pr.incNumIter(); 	
	    	String myselfName = "movingToDest";  
	    	temporaryStr = "\"	LGV IS MOVING TO THE WHAREHOUSE\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"lgv0_"+myselfName,false,
	          new StateFun[]{
	          () -> {	//AD HOC state to execute an action and resumeLastPlan
	          try{
	            PlanRepeat pr1 = PlanRepeat.setUp("adhocstate",-1);
	            //ActionSwitch for a message or event
	             if( currentMessage.msgContent().startsWith("lgvReady") ){
	            	String parg="lgvReady(SOURCE,LGV,false)";
	            	/* ReplyToCaller */
	            	parg = updateVars( Term.createTerm("lgvReady(SOURCE,LGV,V)"),  Term.createTerm("lgvReady(SOURCE,LGV,query)"), 
	            		    		  					Term.createTerm(currentMessage.msgContent()), parg);
	            	if( parg != null ) replyToCaller("lgvReady", parg);
	             }
	            repeatPlanNoTransition(pr1,"adhocstate","adhocstate",false,true);
	          }catch(Exception e ){  
	             println( getName() + " plan=movingToDest WARNING:" + e.getMessage() );
	             //QActorContext.terminateQActorSystem(this); 
	          }
	          },
	           stateTab.get("movingToDestEnd") },//new StateFun[]
	          new String[]{"true","M","lgvReady", "true","M","endAction" },
	          100000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_movingToDest){  
	    	 println( getName() + " plan=movingToDest WARNING:" + e_movingToDest.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//movingToDest
	    
	    StateFun movingToDestEnd = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("movingToDestEnd",-1);
	    	String myselfName = "movingToDestEnd";  
	    	temporaryStr = "\"LGV HAS REACHED THE WHAREHOUSE\"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??msg(lgvMoveWhareh,B,SENDER,D,lgvMoveWhareh(LGV,SOURCE,DEST),F)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"lgvStore(LGV,SOURCE,MATERIAL,RESULT)","lgvStore(LGV,SOURCE,DEST,done)", guardVars ).toString();
	    	sendMsg("lgvStore",guardVars.get("SENDER"), QActorContext.dispatch, temporaryStr ); 
	    	}
	    	//switchTo gotoDeposit
	        switchToPlanAsNextState(pr, myselfName, "lgv0_"+myselfName, 
	              "gotoDeposit",false, false, null); 
	    }catch(Exception e_movingToDestEnd){  
	    	 println( getName() + " plan=movingToDestEnd WARNING:" + e_movingToDestEnd.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//movingToDestEnd
	    
	    StateFun gotoDeposit = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("gotoDeposit",-1);
	    	String myselfName = "gotoDeposit";  
	    	temporaryStr = "\"LGV IS MOVING TO THE WAITING AREA \"";
	    	println( temporaryStr );  
	    	parg = "simulateActionAsynch(\"simulateMoveToDeposit\",1000)"; 
	    	actorOpExecute(parg, false);	//OCT17		 
	    	//switchTo movingToDeposit
	        switchToPlanAsNextState(pr, myselfName, "lgv0_"+myselfName, 
	              "movingToDeposit",false, false, null); 
	    }catch(Exception e_gotoDeposit){  
	    	 println( getName() + " plan=gotoDeposit WARNING:" + e_gotoDeposit.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//gotoDeposit
	    
	    StateFun movingToDeposit = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_movingToDeposit",0);
	     pr.incNumIter(); 	
	    	String myselfName = "movingToDeposit";  
	    	temporaryStr = "\"	LGV IS MOVING TO ITS DEPOSIT \"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"lgv0_"+myselfName,false,
	          new StateFun[]{
	          () -> {	//AD HOC state to execute an action and resumeLastPlan
	          try{
	            PlanRepeat pr1 = PlanRepeat.setUp("adhocstate",-1);
	            //ActionSwitch for a message or event
	             if( currentMessage.msgContent().startsWith("lgvReady") ){
	            	String parg="lgvReady(SOURCE,LGV,false)";
	            	/* ReplyToCaller */
	            	parg = updateVars( Term.createTerm("lgvReady(SOURCE,LGV,V)"),  Term.createTerm("lgvReady(SOURCE,LGV,query)"), 
	            		    		  					Term.createTerm(currentMessage.msgContent()), parg);
	            	if( parg != null ) replyToCaller("lgvReady", parg);
	             }
	            repeatPlanNoTransition(pr1,"adhocstate","adhocstate",false,true);
	          }catch(Exception e ){  
	             println( getName() + " plan=movingToDeposit WARNING:" + e.getMessage() );
	             //QActorContext.terminateQActorSystem(this); 
	          }
	          },
	           stateTab.get("lgvIdle") },//new StateFun[]
	          new String[]{"true","M","lgvReady", "true","M","endAction" },
	          100000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_movingToDeposit){  
	    	 println( getName() + " plan=movingToDeposit WARNING:" + e_movingToDeposit.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//movingToDeposit
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
