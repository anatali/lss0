/* Generated by AN DISI Unibo */ 
package it.unibo.lgvman;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractLgvman extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractLgvman(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/lgvman/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/lgvman/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("doWork",doWork);
	    	stateTab.put("handles200LgvReady",handles200LgvReady);
	    	stateTab.put("handles300LgvLoaded",handles300LgvLoaded);
	    	stateTab.put("handlenmis",handlenmis);
	    	stateTab.put("handlelgvStore_7a",handlelgvStore_7a);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "lgvman tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	it.e80.customGui.createCustomGui( this ,"400", "70", "90", "white"  );
	    	//switchTo doWork
	        switchToPlanAsNextState(pr, myselfName, "lgvman_"+myselfName, 
	              "doWork",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun doWork = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_doWork",0);
	     pr.incNumIter(); 	
	    	String myselfName = "doWork";  
	    	//bbb
	     msgTransition( pr,myselfName,"lgvman_"+myselfName,false,
	          new StateFun[]{stateTab.get("handles200LgvReady"), stateTab.get("handles300LgvLoaded"), stateTab.get("handlenmis"), stateTab.get("handlelgvStore_7a") },//new StateFun[]
	          new String[]{"true","M","s200LgvReady", "true","M","s300LgvLoaded_4", "true","M","nmis_6", "true","M","lgvStore_7a" },
	          600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_doWork){  
	    	 println( getName() + " plan=doWork WARNING:" + e_doWork.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//doWork
	    
	    StateFun handles200LgvReady = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handles200LgvReady",-1);
	    	String myselfName = "handles200LgvReady";  
	    	temporaryStr = "\"A lgv is ready. Now I send m200LoadConfirmed_3 to smarttm, by excpecting s300LgvLoaded_4 from smarttm\"";
	    	println( temporaryStr );  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("s200LgvReady(SOURCE,LGV)");
	    	if( currentMessage != null && currentMessage.msgId().equals("s200LgvReady") && 
	    		pengine.unify(curT, Term.createTerm("s200LgvReady(SOURCE,LGV)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="m200LoadConfirmed_3(SOURCE,LGV)";
	    		/* SendDispatch */
	    		parg = updateVars(Term.createTerm("s200LgvReady(SOURCE,LGV)"),  Term.createTerm("s200LgvReady(SOURCE,LGV)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) sendMsg("m200LoadConfirmed_3","smarttm", QActorContext.dispatch, parg ); 
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"lgvman_"+myselfName,false,true);
	    }catch(Exception e_handles200LgvReady){  
	    	 println( getName() + " plan=handles200LgvReady WARNING:" + e_handles200LgvReady.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handles200LgvReady
	    
	    StateFun handles300LgvLoaded = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handles300LgvLoaded",-1);
	    	String myselfName = "handles300LgvLoaded";  
	    	temporaryStr = "\"The lgv is loaded. Now I send pkup_5 to sdm, by excpecting nmis_6 from sdm\"";
	    	println( temporaryStr );  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("s300LgvLoaded_4(MATERIAL,SOURCE,LGV)");
	    	if( currentMessage != null && currentMessage.msgId().equals("s300LgvLoaded_4") && 
	    		pengine.unify(curT, Term.createTerm("s300LgvLoaded_4(MATERIAL,SOURCE,LGV)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="pkup_5(MATERIAL,SOURCE,LGV)";
	    		/* SendDispatch */
	    		parg = updateVars(Term.createTerm("s300LgvLoaded_4(MATERIAL,SOURCE,LGV)"),  Term.createTerm("s300LgvLoaded_4(MATERIAL,SOURCE,LGV)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) sendMsg("pkup_5","sdm", QActorContext.dispatch, parg ); 
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"lgvman_"+myselfName,false,true);
	    }catch(Exception e_handles300LgvLoaded){  
	    	 println( getName() + " plan=handles300LgvLoaded WARNING:" + e_handles300LgvLoaded.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handles300LgvLoaded
	    
	    StateFun handlenmis = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handlenmis",-1);
	    	String myselfName = "handlenmis";  
	    	temporaryStr = "\"A new mission must start. Now I send m100Mission_7 to smarttm, by excpecting lgvStore_7a from\"";
	    	println( temporaryStr );  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("mission(ORDREF,DEST)");
	    	if( currentMessage != null && currentMessage.msgId().equals("nmis_6") && 
	    		pengine.unify(curT, Term.createTerm("mission(ORDREF,DEST)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="m100Mission_7(mission(ORDREF,DEST))";
	    		/* SendDispatch */
	    		parg = updateVars(Term.createTerm("mission(ORDREF,DEST)"),  Term.createTerm("mission(ORDREF,DEST)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) sendMsg("m100Mission_7","smarttm", QActorContext.dispatch, parg ); 
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"lgvman_"+myselfName,false,true);
	    }catch(Exception e_handlenmis){  
	    	 println( getName() + " plan=handlenmis WARNING:" + e_handlenmis.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handlenmis
	    
	    StateFun handlelgvStore_7a = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handlelgvStore_7a",-1);
	    	String myselfName = "handlelgvStore_7a";  
	    	temporaryStr = "\"MOVE DONE\"";
	    	println( temporaryStr );  
	    	repeatPlanNoTransition(pr,myselfName,"lgvman_"+myselfName,false,true);
	    }catch(Exception e_handlelgvStore_7a){  
	    	 println( getName() + " plan=handlelgvStore_7a WARNING:" + e_handlelgvStore_7a.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handlelgvStore_7a
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
