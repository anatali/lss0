/* Generated by AN DISI Unibo */ 
package it.unibo.smarttm;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractSmarttm extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractSmarttm(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/smarttm/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");		
			this.planFilePath = "./srcMore/it/unibo/smarttm/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("doWork",doWork);
	    	stateTab.put("handleNewLoad",handleNewLoad);
	    	stateTab.put("handleLgvReady",handleLgvReady);
	    	stateTab.put("driveLgv",driveLgv);
	    	stateTab.put("handlelgvLoaded",handlelgvLoaded);
	    	stateTab.put("handlem100Mission",handlem100Mission);
	    	stateTab.put("handleStored",handleStored);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "smarttm tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	it.e80.customGui.createCustomGui( this ,"400", "10", "200", "yellow"  );
	    	//switchTo doWork
	        switchToPlanAsNextState(pr, myselfName, "smarttm_"+myselfName, 
	              "doWork",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun doWork = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_doWork",0);
	     pr.incNumIter(); 	
	    	String myselfName = "doWork";  
	    	//bbb
	     msgTransition( pr,myselfName,"smarttm_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleNewLoad"), stateTab.get("handleLgvReady"), stateTab.get("driveLgv"), stateTab.get("handlelgvLoaded"), stateTab.get("handlem100Mission"), stateTab.get("handleStored") },//new StateFun[]
	          new String[]{"true","M","qLoad", "true","M","lgvReady", "true","M","m200LoadConfirmed", "true","M","lgvLoaded", "true","M","m100Mission", "true","M","lgvStore" },
	          600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_doWork){  
	    	 println( getName() + " plan=doWork WARNING:" + e_doWork.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//doWork
	    
	    StateFun handleNewLoad = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleNewLoad",-1);
	    	String myselfName = "handleNewLoad";  
	    	temporaryStr = "\"A new load is requested. Now I check if some LGV is available\"";
	    	println( temporaryStr );  
	    	//onMsg 
	    	curT = Term.createTerm("qLoad(S)");
	    	if( currentMessage != null && currentMessage.msgId().equals("qLoad") && 
	    		pengine.unify(curT, Term.createTerm("qLoad(SOURCE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="engageLgv(S,LGV)";
	    		/* PHead */
	    		parg =  updateVars( Term.createTerm("qLoad(SOURCE)"), 
	    		                    Term.createTerm("qLoad(S)"), 
	    			    		  	Term.createTerm(currentMessage.msgContent()), parg);
	    			if( parg != null ) {
	    			    aar = QActorUtils.solveGoal(this,myCtx,pengine,parg,"",outEnvView,86400000);
	    				//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
	    				if( aar.getInterrupted() ){
	    					curPlanInExec   = "handleNewLoad";
	    					if( aar.getTimeRemained() <= 0 ) addRule("tout(demo,"+getName()+")");
	    					if( ! aar.getGoon() ) return ;
	    				} 			
	    				if( aar.getResult().equals("failure")){
	    					if( ! aar.getGoon() ) return ;
	    				}else if( ! aar.getGoon() ) return ;
	    			}
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?goalResult(failure)" )) != null ){
	    	temporaryStr = "\"		NO MORE LGV READY\"";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?goalResult(engageLgv(S,LGV))" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"lgvReady(SOURCE,LGV,V)","lgvReady(S,LGV,query)", guardVars ).toString();
	    	sendMsg("lgvReady",guardVars.get("LGV"), QActorContext.dispatch, temporaryStr ); 
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"smarttm_"+myselfName,false,true);
	    }catch(Exception e_handleNewLoad){  
	    	 println( getName() + " plan=handleNewLoad WARNING:" + e_handleNewLoad.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleNewLoad
	    
	    StateFun handleLgvReady = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleLgvReady",-1);
	    	String myselfName = "handleLgvReady";  
	    	printCurrentMessage(false);
	    	temporaryStr = "\"A new LGV is ready. Now I send s200LgvReady to lgvman, expecting a m200LoadConfirmed\"";
	    	println( temporaryStr );  
	    	//onMsg 
	    	curT = Term.createTerm("lgvReady(SOURCE,LGV,true)");
	    	if( currentMessage != null && currentMessage.msgId().equals("lgvReady") && 
	    		pengine.unify(curT, Term.createTerm("lgvReady(SOURCE,LGV,V)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="s200LgvReady(SOURCE,LGV)";
	    		/* SendDispatch */
	    		parg = updateVars(Term.createTerm("lgvReady(SOURCE,LGV,V)"),  Term.createTerm("lgvReady(SOURCE,LGV,true)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) sendMsg("s200LgvReady","lgvman", QActorContext.dispatch, parg ); 
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"smarttm_"+myselfName,false,true);
	    }catch(Exception e_handleLgvReady){  
	    	 println( getName() + " plan=handleLgvReady WARNING:" + e_handleLgvReady.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleLgvReady
	    
	    StateFun driveLgv = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("driveLgv",-1);
	    	String myselfName = "driveLgv";  
	    	printCurrentMessage(false);
	    	temporaryStr = "\"Now I drive LGV, expecting  lgvLoaded form LGV \"";
	    	println( temporaryStr );  
	    	//onMsg 
	    	curT = Term.createTerm("m200LoadConfirmed(SOURCE,LGV)");
	    	if( currentMessage != null && currentMessage.msgId().equals("m200LoadConfirmed") && 
	    		pengine.unify(curT, Term.createTerm("m200LoadConfirmed(SOURCE,LGV)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="lgvMoveLoad(LGV,SOURCE)";
	    		/* SendDispatch */
	    		parg = updateVars(Term.createTerm("m200LoadConfirmed(SOURCE,LGV)"),  Term.createTerm("m200LoadConfirmed(SOURCE,LGV)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) sendMsg("lgvMoveLoad",guardVars.get("LGV"), QActorContext.dispatch, parg ); 
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"smarttm_"+myselfName,false,true);
	    }catch(Exception e_driveLgv){  
	    	 println( getName() + " plan=driveLgv WARNING:" + e_driveLgv.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//driveLgv
	    
	    StateFun handlelgvLoaded = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handlelgvLoaded",-1);
	    	String myselfName = "handlelgvLoaded";  
	    	printCurrentMessage(false);
	    	temporaryStr = "\"Now I tell lgvaman that the LGV is loaded (s300LgvLoaded), by expecting m100Mission from lgvman\"";
	    	println( temporaryStr );  
	    	//onMsg 
	    	curT = Term.createTerm("lgvLoaded(LGV,SOURCE,MATERIAL)");
	    	if( currentMessage != null && currentMessage.msgId().equals("lgvLoaded") && 
	    		pengine.unify(curT, Term.createTerm("lgvLoaded(LGV,SOURCE,MATERIAL)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="s300LgvLoaded(MATERIAL,SOURCE,LGV)";
	    		/* SendDispatch */
	    		parg = updateVars(Term.createTerm("lgvLoaded(LGV,SOURCE,MATERIAL)"),  Term.createTerm("lgvLoaded(LGV,SOURCE,MATERIAL)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) sendMsg("s300LgvLoaded","lgvman", QActorContext.dispatch, parg ); 
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"smarttm_"+myselfName,false,true);
	    }catch(Exception e_handlelgvLoaded){  
	    	 println( getName() + " plan=handlelgvLoaded WARNING:" + e_handlelgvLoaded.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handlelgvLoaded
	    
	    StateFun handlem100Mission = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handlem100Mission",-1);
	    	String myselfName = "handlem100Mission";  
	    	printCurrentMessage(false);
	    	temporaryStr = "\"Now I have to manage a mission by sending lgvMoveWhareh to the LGV and expecting lgvStore\"";
	    	println( temporaryStr );  
	    	//onMsg 
	    	curT = Term.createTerm("m100Mission(mission(order(MATERIAL,SOURCE,LGV),DEST))");
	    	if( currentMessage != null && currentMessage.msgId().equals("m100Mission") && 
	    		pengine.unify(curT, Term.createTerm("m100Mission(MISSION)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="lgvMoveWhareh(LGV,SOURCE,DEST)";
	    		/* SendDispatch */
	    		parg = updateVars(Term.createTerm("m100Mission(MISSION)"),  Term.createTerm("m100Mission(mission(order(MATERIAL,SOURCE,LGV),DEST))"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) sendMsg("lgvMoveWhareh",guardVars.get("LGV"), QActorContext.dispatch, parg ); 
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"smarttm_"+myselfName,false,true);
	    }catch(Exception e_handlem100Mission){  
	    	 println( getName() + " plan=handlem100Mission WARNING:" + e_handlem100Mission.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handlem100Mission
	    
	    StateFun handleStored = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleStored",-1);
	    	String myselfName = "handleStored";  
	    	printCurrentMessage(false);
	    	//onMsg 
	    	curT = Term.createTerm("lgvStore(LGV,SOURCE,MATERIAL,RESULT)");
	    	if( currentMessage != null && currentMessage.msgId().equals("lgvStore") && 
	    		pengine.unify(curT, Term.createTerm("lgvStore(LGV,SOURCE,MATERIAL,RESULT)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg = "lgvStore(LGV,SOURCE,MATERIAL,RESULT)";
	    		/* Print */
	    		parg =  updateVars( Term.createTerm("lgvStore(LGV,SOURCE,MATERIAL,RESULT)"), 
	    		                    Term.createTerm("lgvStore(LGV,SOURCE,MATERIAL,RESULT)"), 
	    			    		  	Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) println( parg );
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"smarttm_"+myselfName,false,true);
	    }catch(Exception e_handleStored){  
	    	 println( getName() + " plan=handleStored WARNING:" + e_handleStored.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleStored
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
