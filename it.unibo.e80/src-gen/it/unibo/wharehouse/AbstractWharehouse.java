/* Generated by AN DISI Unibo */ 
package it.unibo.wharehouse;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractWharehouse extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractWharehouse(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/wharehouse/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");		
			this.planFilePath = "./srcMore/it/unibo/wharehouse/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("handleWh",handleWh);
	    	stateTab.put("handleStore",handleStore);
	    	stateTab.put("storeInACell",storeInACell);
	    	stateTab.put("storeBusy",storeBusy);
	    	stateTab.put("handleRemove",handleRemove);
	    	stateTab.put("removeFromCell",removeFromCell);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "wharehouse tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "\"	wharehouse WAITING\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"wharehouse_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleWh") },//new StateFun[]
	          new String[]{"true","M","wh" },
	          6000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun handleWh = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleWh",-1);
	    	String myselfName = "handleWh";  
	    	printCurrentMessage(false);
	    	//onMsg 
	    	curT = Term.createTerm("cmd(store,M)");
	    	if( currentMessage != null && currentMessage.msgId().equals("wh") && 
	    		pengine.unify(curT, Term.createTerm("cmd(TYPE,CMD)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		/* SwitchTransition */
	    		String parg = "handleStore";
	    		parg =  updateVars( Term.createTerm("cmd(TYPE,CMD)"), 
	    			                Term.createTerm("cmd(store,M)"), 
	    			                Term.createTerm(currentMessage.msgContent()), parg);
	    		if(parg != null){ 
	    			switchToPlanAsNextState(pr, myselfName, "console_"+myselfName, 
	    		    	 		    		parg,false, true, null); 
	    		    return;	
	    		    //the control is given to the caller state
	    		}
	    	}
	    	//onMsg 
	    	curT = Term.createTerm("cmd(remove,M)");
	    	if( currentMessage != null && currentMessage.msgId().equals("wh") && 
	    		pengine.unify(curT, Term.createTerm("cmd(TYPE,CMD)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		/* SwitchTransition */
	    		String parg = "handleRemove";
	    		parg =  updateVars( Term.createTerm("cmd(TYPE,CMD)"), 
	    			                Term.createTerm("cmd(remove,M)"), 
	    			                Term.createTerm(currentMessage.msgContent()), parg);
	    		if(parg != null){ 
	    			switchToPlanAsNextState(pr, myselfName, "console_"+myselfName, 
	    		    	 		    		parg,false, true, null); 
	    		    return;	
	    		    //the control is given to the caller state
	    		}
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"wharehouse_"+myselfName,false,false);
	    }catch(Exception e_handleWh){  
	    	 println( getName() + " plan=handleWh WARNING:" + e_handleWh.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleWh
	    
	    StateFun handleStore = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleStore",-1);
	    	String myselfName = "handleStore";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?cell(C,free)" )) != null ){
	    	//onMsg 
	    	curT = Term.createTerm("cmd(store,M)");
	    	if( currentMessage != null && currentMessage.msgId().equals("wh") && 
	    		pengine.unify(curT, Term.createTerm("cmd(TYPE,CMD)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		/* SwitchTransition */
	    		String parg = "storeInACell";
	    		parg =  updateVars( Term.createTerm("cmd(TYPE,CMD)"), 
	    			                Term.createTerm("cmd(store,M)"), 
	    			                Term.createTerm(currentMessage.msgContent()), parg);
	    		if(parg != null){ 
	    			switchToPlanAsNextState(pr, myselfName, "console_"+myselfName, 
	    		    	 		    		parg,false, true, null); 
	    		    return;	
	    		    //the control is given to the caller state
	    		}
	    	}
	    	}
	    	//switchTo storeBusy
	        switchToPlanAsNextState(pr, myselfName, "wharehouse_"+myselfName, 
	              "storeBusy",false, false, null); 
	    }catch(Exception e_handleStore){  
	    	 println( getName() + " plan=handleStore WARNING:" + e_handleStore.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleStore
	    
	    StateFun storeInACell = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("storeInACell",-1);
	    	String myselfName = "storeInACell";  
	    	temporaryStr = "\"storeInACell\"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??cell(C,free)" )) != null ){
	    	temporaryStr = "cell(C,booked)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	addRule( temporaryStr );  
	    	}
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "cmd(storeResult,R)","cmd(storeResult,booked)", guardVars ).toString();
	    	emit( "storeResult", temporaryStr );
	    	//switchTo init
	        switchToPlanAsNextState(pr, myselfName, "wharehouse_"+myselfName, 
	              "init",false, false, null); 
	    }catch(Exception e_storeInACell){  
	    	 println( getName() + " plan=storeInACell WARNING:" + e_storeInACell.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//storeInACell
	    
	    StateFun storeBusy = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("storeBusy",-1);
	    	String myselfName = "storeBusy";  
	    	temporaryStr = "\"storeBusy 1\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "cmd(storeResult,R)","cmd(storeResult,busy)", guardVars ).toString();
	    	emit( "storeResult", temporaryStr );
	    	temporaryStr = "\"storeBusy 2\"";
	    	println( temporaryStr );  
	    	//switchTo init
	        switchToPlanAsNextState(pr, myselfName, "wharehouse_"+myselfName, 
	              "init",false, false, null); 
	    }catch(Exception e_storeBusy){  
	    	 println( getName() + " plan=storeBusy WARNING:" + e_storeBusy.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//storeBusy
	    
	    StateFun handleRemove = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleRemove",-1);
	    	String myselfName = "handleRemove";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?cell(C,M)" )) != null ){
	    	//onMsg 
	    	curT = Term.createTerm("cmd(remove,M)");
	    	if( currentMessage != null && currentMessage.msgId().equals("wh") && 
	    		pengine.unify(curT, Term.createTerm("cmd(TYPE,CMD)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg="cell(C,toremove)";
	    		parg = updateVars( Term.createTerm("cmd(TYPE,CMD)"),  Term.createTerm("cmd(remove,M)"), 
	    			    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) addRule(parg);	    		  					
	    	}
	    	}
	    	//switchTo removeFromCell
	        switchToPlanAsNextState(pr, myselfName, "wharehouse_"+myselfName, 
	              "removeFromCell",false, false, null); 
	    }catch(Exception e_handleRemove){  
	    	 println( getName() + " plan=handleRemove WARNING:" + e_handleRemove.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleRemove
	    
	    StateFun removeFromCell = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("removeFromCell",-1);
	    	String myselfName = "removeFromCell";  
	    	temporaryStr = "\"		todo: activate a robot that should emit a robot event  \"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?cell(C,toremove)" )) != null ){
	    	temporaryStr = "cell(C,free)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	addRule( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " ??cell(C,toremove)" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "cmd(storeResult,R)","cmd(storeResult,space)", guardVars ).toString();
	    	emit( "storeResult", temporaryStr );
	    	}
	    	//switchTo init
	        switchToPlanAsNextState(pr, myselfName, "wharehouse_"+myselfName, 
	              "init",false, false, null); 
	    }catch(Exception e_removeFromCell){  
	    	 println( getName() + " plan=removeFromCell WARNING:" + e_removeFromCell.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//removeFromCell
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
