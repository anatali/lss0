System e80Lgv


Event sourceEngaged        : sourceEngaged( SOURCE )	//SOURCE = s1, s2

Dispatch endAction         : endAction(A,R)
Dispatch endActorOp        : endActorOp(A,R)

Dispatch materialAvailable : sourceEngaged( SOURCE )	//SOURCE = s1, s2

Dispatch qLoad    		   : qLoad( SOURCE )
Dispatch lgvReady 		   : lgvReady(SOURCE,LGV,V) 		//V=query/true/false 
Dispatch s200LgvReady	   : s200LgvReady( SOURCE, LGV )
Dispatch m200LoadConfirmed : m200LoadConfirmed( SOURCE, LGV )
Dispatch s300LgvLoaded     : s300LgvLoaded( MATERIAL, SOURCE, LGV )
Dispatch pkup              : pkup(MATERIAL,SOURCE,LGV)
Dispatch nmis              : mission(ORDREF,DEST)		//ORDREF=order(MATERIAL,SOURCE,LGV)
Dispatch m100Mission       : m100Mission( MISSION )		//MISSION=mission(ORDREF,DEST)
Dispatch lgvMoveLoad       : lgvMoveLoad(LGV,SOURCE)	//SOURCE=s1|s2| 
Dispatch lgvMoveWhareh     : lgvMoveWhareh(LGV,SOURCE,DEST)	//SOURCE=s1|s2  DEST=  cell
Dispatch lgvLoaded         : lgvLoaded( LGV,SOURCE,MATERIAL )
Dispatch lgvStore          : lgvStore( LGV,SOURCE,MATERIAL,RESULT )
Dispatch lgvMission        : lgvMission( LGV,SOURCE,MATERIAL,RESULT )

Context  ctxE80Lgv  ip [ host="localhost"   port=8023 ] 

/*
 * ------------------------------------
 * LASER GUIDED VEHICLE
 * ------------------------------------
 */  

QActor lgv0 context ctxE80Lgv   {
Rules{
	lgvId( lgv0 ).
}
	Plan init normal [
 		javaRun it.e80.customGui.createCustomGui("400", "30", "500", "cyan")
	]
	switchTo lgvIdle
	
	Plan lgvIdle[
 		[ !? lgvId( LGV )] println( info( "STATE", LGV, "IDLE" ) )
	]
	transition stopAfter 100000 
		whenMsg lgvReady-> handlelgvReadyQuery 
		
	Plan handlelgvReadyQuery [
		//printCurrentMessage;
 		[ !? lgvId( LGV )]  onMsg  lgvReady : lgvReady(SOURCE,LGV,query ) -> 
								replyToCaller -m lgvReady : lgvReady(SOURCE,LGV,true )
	]
	transition stopAfter 10000
		whenMsg lgvMoveLoad -> handlelgvloadcmd
		
	Plan handlelgvloadcmd[ 
		println("LGV MUST MOVE FROM DEPOSIT TO SOURCE ");
		memoCurrentMessage  ;
		actorOp simulateActionAsynch("simulateMoveToSource",1000)
	]
	switchTo movingToSource
	
	Plan movingToSource[
		println("	LGV IS MOVING FROM DEPOSIT TO SOURCE ")
	]
	transition stopAfter 100000    
		whenMsg lgvReady : lgvReady(SOURCE,LGV,reset)  do switchTo lgvIdle ,
		whenMsg lgvReady : lgvReady(SOURCE,LGV,query ) do replyToCaller -m lgvReady : lgvReady(SOURCE,LGV,false ),
		whenMsg endAction  -> movingToLoadEnd
    finally repeatPlan	//other msgs handled
	  
	Plan movingToLoadEnd[
		println("LGV HAS REACHED THE  SOURCE ");
		//[ !? msg(A,B,C,D,lgvMoveLoad(LGV,SOURCE),F) ] println( msg(A,B,C,D,lgvMoveLoad(LGV,SOURCE),F) ) ;
  		[ ?? msg(A,B,SENDER,D,lgvMoveLoad(LGV,SOURCE),F)  ] forward SENDER -m lgvLoaded : lgvLoaded(LGV,SOURCE,material)
	]
	transition stopAfter 100000 
		whenMsg lgvMoveWhareh -> handlelgvmovetodest
 	
	Plan handlelgvmovetodest [
		println("LGV MIUST MOVE TO THE WHAREHOUSE");
		memoCurrentMessage ;
		actorOp simulateActionAsynch("simulateMoveToDest",1000)
 	]
 	switchTo movingToDest
 	
 	Plan movingToDest[
 		println("	LGV IS MOVING TO THE WHAREHOUSE")
 	]
	transition stopAfter 100000
		//no reset is possible
		whenMsg lgvReady : lgvReady(SOURCE,LGV,query ) do replyToCaller -m lgvReady : lgvReady(SOURCE,LGV,false ),
		whenMsg endAction  -> movingToDestEnd 
 	finally repeatPlan	//other msgs handled 	
 		
	Plan movingToDestEnd[  
		println("LGV HAS REACHED THE WHAREHOUSE"); 
		//[ !? msg(A,B,C,D,E,F)  ]  println( msg(A,B,C,D,E,F) );
		[ ?? msg(lgvMoveWhareh,B,SENDER,D,lgvMoveWhareh(LGV,SOURCE,DEST),F)  ]  
						forward SENDER -m lgvStore : lgvStore(LGV,SOURCE,DEST,done)
	] 
	switchTo gotoDeposit
	   
	Plan gotoDeposit[
		println("LGV IS MOVING TO THE WAITING AREA ");
		actorOp simulateActionAsynch("simulateMoveToDeposit",1000)
	]
	switchTo movingToDeposit
	
	Plan movingToDeposit[
		println("	LGV IS MOVING TO ITS DEPOSIT ")
	]
	transition stopAfter 100000
		whenMsg lgvReady : lgvReady(SOURCE,LGV,query ) do replyToCaller -m lgvReady : lgvReady(SOURCE,LGV,false ),
		whenMsg endAction  -> lgvIdle
 		finally repeatPlan	//other msgs handled
 }

/*
 * ------------------------------------
 * LGV tester
 * ------------------------------------
*/  

QActor lgvtester context ctxE80Lgv{
	Plan init normal [ 
 		println("lgvtester query") ;
		forward lgv0 -m lgvReady : lgvReady(s1,lgv0,query)		 
	]
	transition stopAfter 100000 
		whenMsg lgvReady : lgvReady(SOURCE,lgv0,true ) do switchTo simulatesmarttm
		
	Plan simulatesmarttm[
		println("lgvtester lgvMoveLoad") ;
		forward lgv0 -m lgvMoveLoad : lgvMoveLoad(lgv0,s1)
	]
	transition stopAfter 100000 
		whenMsg lgvLoaded : lgvLoaded(LGV,SOURCE,M) do switchTo simulateaftersdm
	
	Plan simulateaftersdm[
		println("lgvtester lgvMoveWhareh") ;
		forward lgv0 -m lgvMoveWhareh : lgvMoveWhareh(lgv0,s1,cell1)
	]
	transition stopAfter 100000 
		whenMsg lgvStore : lgvStore(LGV,SOURCE,M,R) do println( lgvStore(LGV,SOURCE,M,R) )
}

QActor lgvtester1 context ctxE80Lgv{
	Plan init normal [ 
//		delay 1000;
//		println("lgvtester1 query") ;
//		forward lgv0 -m lgvReady : lgvReady(s1,lgv0,query)		 
	]
	transition stopAfter 100000 
		whenMsg lgvReady : lgvReady(s1,lgv0,ANSW) do println( lgvReady(s1,lgv0,ANSW) )
	
}

