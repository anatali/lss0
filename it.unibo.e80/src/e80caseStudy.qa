System e80CaseStudy

Event usercmd 			   : usercmd(CMD)		 		//emitted by the web gui
Event sourceEngaged        : sourceEngaged( SOURCE )	//SOURCE = s1, s2

Dispatch endAction         : endAction(A,R)		//sent by asynchronous actions

Dispatch materialAvailable   : sourceEngaged( SOURCE )	//SOURCE = s1, s2
Dispatch qLoad_1             : qLoad_1( SOURCE )
Dispatch lgvReady_2 	     : lgvReady_2(SOURCE,LGV,V) 		//V=query/true/false 
Dispatch s200LgvReady	     : s200LgvReady( SOURCE, LGV )
Dispatch m200LoadConfirmed_3 : m200LoadConfirmed_3( SOURCE, LGV )
Dispatch s300LgvLoaded_4     : s300LgvLoaded_4( MATERIAL, SOURCE, LGV )
Dispatch pkup_5              : pkup_5(MATERIAL,SOURCE,LGV)
Dispatch nmis_6              : mission(ORDREF,DEST)		//ORDREF=order(MATERIAL,SOURCE,LGV)
Dispatch m100Mission_7       : m100Mission_7( MISSION )		//MISSION=mission(ORDREF,DEST)
Dispatch lgvMoveLoad_3cmd    : lgvMoveLoad_3cmd(LGV,SOURCE)	//SOURCE=s1|s2| 
Dispatch lgvMoveWhareh_7cmd  : lgvMoveWhareh_7cmd(LGV,SOURCE,DEST)	//SOURCE=s1|s2  DEST=  cell
Dispatch lgvLoaded_3a        : lgvLoaded_3a( LGV,SOURCE,MATERIAL )
Dispatch lgvStore_7a         : lgvStore_7a( LGV,SOURCE,MATERIAL,RESULT )

Context  ctxE80CaseStudy  ip [ host="localhost"   port=8023 ] -httpserver
EventHandler evh for sourceEngaged {
	forwardEvent sourcehandler -m materialAvailable
};

/*
 * ---------------------------------------------------
 * HANDLER OF sourceEngaged EVENTS mapped into messages
 * ---------------------------------------------------
 */
QActor sourcehandler context ctxE80CaseStudy    {
	Plan init normal [  
		javaRun it.e80.customGui.createCustomGui("400", "10", "20", "gray");
		println("sourcehandler WORKING")   
	]
	transition stopAfter 600000
		whenMsg materialAvailable -> handlematerialAvailable
	finally repeatPlan
	
	Plan handlematerialAvailable resumeLastPlan[
		printCurrentMessage ;
 		println("A new source is engaged. Now I send qLaod to smarttm by expecting s200LgvReady");
		onMsg  materialAvailable : sourceEngaged(S) -> forward smarttm -m qLoad_1 : qLoad_1(S)
		//WARNING:  s200LgvReady is the answer sent from smarttm
	]	
	Plan lgvNotReady resumeLastPlan[
		println("No LGV is ready")
	]
	
}

/*
 * ---------------------------------------------------
 * LASER GUIDED VEHICLE MANAGER
 * ---------------------------------------------------
 */
QActor lgvman context ctxE80CaseStudy  { 
	Plan init normal [ 
		javaRun it.e80.customGui.createCustomGui("400", "70", "90" , "white")
	]
	switchTo doWork
	 
	Plan doWork[
// 		println("lgvman READY TO Work") 
	] 
	transition stopAfter 600000
		//whenMsg    materialAvailable -> handlematerialAvailable,  
 		whenMsg    s200LgvReady      -> handles200LgvReady,
		whenMsg    s300LgvLoaded_4   -> handles300LgvLoaded,
		whenMsg    nmis_6            -> handlenmis,
		whenMsg    lgvStore_7a		 -> handlelgvStore_7a
	finally repeatPlan 
 
	Plan handles200LgvReady resumeLastPlan[
// 		printCurrentMessage ;
 		println("A lgv is ready. Now I send m200LoadConfirmed_3 to smarttm, by excpecting s300LgvLoaded_4 from smarttm");
 		onMsg s200LgvReady : s200LgvReady(SOURCE, LGV) ->  
				forward smarttm -m m200LoadConfirmed_3 : m200LoadConfirmed_3(SOURCE, LGV)
	] 
	 
	Plan handles300LgvLoaded resumeLastPlan[
//		printCurrentMessage;
		println("The lgv is loaded. Now I send pkup_5 to sdm, by excpecting nmis_6 from sdm");
		onMsg s300LgvLoaded_4 : s300LgvLoaded_4(MATERIAL, SOURCE, LGV) -> forward sdm -m pkup_5 : pkup_5(MATERIAL, SOURCE, LGV) 
	]
	
	Plan handlenmis resumeLastPlan[
//		printCurrentMessage ;
		println("A new mission must start. Now I send m100Mission_7 to smarttm, by excpecting lgvStore_7a from");
		onMsg nmis_6 : mission(ORDREF,DEST) -> forward smarttm -m m100Mission_7 : m100Mission_7( mission(ORDREF,DEST) )
	]
	
	Plan handlelgvStore_7a resumeLastPlan[
//		printCurrentMessage ;
		println("MOVE DONE")
	] 
}


/*
 * ---------------------------------------------------
 * SMART TRAFFIC MANAGER
 * ---------------------------------------------------
 */
QActor smarttm context ctxE80CaseStudy {
Rules{
	lgvStatus( lgv, free ).
//	We could send a lgvReady_2 query to each LGV of a list. But we prefer to handle our kb
	
	engageLgv( SOURCE, LGV ) :-  
		lgvStatus( LGV, free ),
		replaceRule( lgvStatus( LGV, free ),  lgvStatus( LGV, engaged ) ), 
		//actorPrintln( lgvtaker( SOURCE, LGV ) ),
		assert( lgvtaker( SOURCE, LGV ) ).
		
	disengageLgv( LGV ):-
		actorPrintln( disengageLgv( LGV ) ),
		replaceRule( lgvStatus( LGV, engaged ),  lgvStatus( LGV, free ) ).
}	 
   
	Plan init normal [  
		javaRun it.e80.customGui.createCustomGui("400", "10", "200", "yellow")
	]
	switchTo doWork    
	
	Plan doWork[ 
//		println("smarttm READY TO Work")
	]
	transition stopAfter 600000
		whenMsg  qLoad_1             -> handleNewLoad ,
		whenMsg  lgvReady_2          -> handleLgvReady,
 		whenMsg  m200LoadConfirmed_3 -> driveLgv,
 		whenMsg  lgvLoaded_3a        -> handlelgvLoaded,
 		whenMsg  m100Mission_7       -> handlem100Mission,
		whenMsg  lgvStore_7a         -> handleStored		
	finally repeatPlan 
	
	Plan handleNewLoad resumeLastPlan[
		//printCurrentMessage ;
 		println("A new load is requested. Now I check if some LGV is available");
		onMsg qLoad_1 : qLoad_1(S) -> demo engageLgv(S,LGV) ; //println("smarttm handleNewLoad") ;
		 //trova un LGV disponibile (lgvtaker) e chiede se è ready
		 //[!? goalResult( R ) ] println( R );
		 [!? goalResult( failure ) ] println("		NO MORE LGV READY");
		 [!? goalResult( engageLgv(S,LGV) ) ]     
		 		//javaRun it.e80.lgvSupport.askReady(SOURCE,LGV)	//IMPORTANT: SOURCE send the answer lgvReady_2
		 		forward LGV -m lgvReady_2 : lgvReady_2(S,LGV,query)
 	]
  		
 	Plan handleLgvReady resumeLastPlan[
// 		printCurrentMessage;
		println("A new LGV is ready. Now I send s200LgvReady to lgvman, expecting a m200LoadConfirmed_3");		
  		onMsg lgvReady_2 : lgvReady_2(SOURCE,LGV,true) -> 
 				forward lgvman -m  s200LgvReady : s200LgvReady(SOURCE, LGV)
 	] 
 	  	
  	Plan driveLgv resumeLastPlan[
//  		printCurrentMessage ; 		
  		println("Now I drive LGV, expecting  lgvLoaded_3a form LGV ") ;
  		onMsg m200LoadConfirmed_3 : m200LoadConfirmed_3(SOURCE,LGV) -> 
  				forward LGV -m lgvMoveLoad_3cmd : lgvMoveLoad_3cmd(LGV,SOURCE)
  		 
  	]
//  	transition stopAfter 10000
//  		whenMsg lgvLoaded_3a : lgvLoaded_3a(LGV,SOURCE,MATERIAL) do 
//  						forward  lgvman -m s300LgvLoaded_4 : s300LgvLoaded_4(MATERIAL,SOURCE,LGV)
  	
 	Plan handlelgvLoaded resumeLastPlan [
//		printCurrentMessage ;
		println("Now I tell lgvaman that the LGV is loaded (s300LgvLoaded_4), by expecting m100Mission_7 from lgvman");
 		onMsg lgvLoaded_3a : lgvLoaded_3a( LGV,SOURCE,MATERIAL ) ->
 				forward  lgvman -m s300LgvLoaded_4 : s300LgvLoaded_4(MATERIAL,SOURCE,LGV)
 	]

 	Plan handlem100Mission resumeLastPlan [
// 		printCurrentMessage ;
 		println("Now I have to manage a mission by sending lgvMoveWhareh_7cmd to the LGV and expecting lgvStore_7a from lgv");
 		onMsg m100Mission_7 : m100Mission_7( mission(order(MATERIAL,SOURCE,LGV),DEST) ) ->  
 		 								forward  LGV -m  lgvMoveWhareh_7cmd : lgvMoveWhareh_7cmd(LGV,SOURCE,DEST)
 	]
  	
 	Plan handleStored resumeLastPlan [
// 		printCurrentMessage ;
 		onMsg lgvStore_7a : lgvStore_7a( LGV,SOURCE,MATERIAL,RESULT ) -> println( lgvStore_7a( LGV,SOURCE,MATERIAL,RESULT ) ) ;
  		onMsg lgvStore_7a : lgvStore_7a( LGV,SOURCE,MATERIAL,RESULT ) -> demo disengageLgv(LGV);
 		onMsg lgvStore_7a : lgvStore_7a( LGV,SOURCE,MATERIAL,RESULT ) -> forward lgvman -m lgvStore_7a : lgvStore_7a( LGV,SOURCE,MATERIAL,RESULT )
 	]
 }


/*
 * ---------------------------------------------------
 * SMART DECSION MAKER
 * ---------------------------------------------------
 */ 

QActor sdm context ctxE80CaseStudy   {
Rules{
	cell( c1, free ). 
	cell( c2, free ).
	
	createMission( MATERIAL,SOURCE,LGV, mission( order(MATERIAL,SOURCE,LGV), DEST) ) :- 
		//actorPrintln( createMission( MATERIAL,LGV ) ),
		findDestInWharehouse( MATERIAL,DEST ),
		//actorPrintln( mission( order(MATERIAL,LGV), DEST) ),
		assert( mission( order(MATERIAL,SOURCE,LGV), DEST) ).  
		
	findDestInWharehouse(MATERIAL,CELL):-
		retract( cell( CELL,free ) ),
		assert( cell( CELL,bookedfor(MATERIAL) ) ).    
}

	Plan init normal [  
		javaRun it.e80.customGui.createCustomGui("400", "10", "400", "green") 
	]  
	switchTo doWork
	
	Plan doWork[   
		//println("sdm doWork")
	]  
	transition stopAfter 600000    
 		whenMsg pkup_5 -> handlepkup  
 	finally repeatPlan
 	
 	Plan handlepkup resumeLastPlan[
 		printCurrentMessage;
 		println("pkup_5 received. Now I create a mission, send it to lgvman by expecting ???"); 
 		onMsg pkup_5 : pkup_5(MATERIAL,SOURCE,LGV) -> demo createMission(MATERIAL,SOURCE,LGV, MISSION);
 		[ !? goalResult(createMission(MATERIAL,SOURCE,LGV, MISSION)) ] println( MISSION ) ;
 		[ !? goalResult(createMission(MATERIAL,SOURCE,LGV, MISSION)) ] forward lgvman -m nmis_6 : MISSION
 	]  
	
}

/*
 * ------------------------------------
 * LASER GUIDED VEHICLE
 * ------------------------------------
 */  

QActor lgv context ctxE80CaseStudy   {
 
Rules{
	lgvId( lgv ).
}

	//Utility plan to handle  lgvReady_2 messages when not ready
	Plan checkLgvReady resumeLastPlan[
		println("LGV checkLgvReady while busy");
		printCurrentMessage;
 		onMsg lgvReady_2 : lgvReady_2(SOURCE,LGV,reset) -> switchTo lgvIdle ;
		onMsg lgvReady_2 : lgvReady_2(SOURCE,LGV,query) -> replyToCaller -m lgvReady_2 : lgvReady_2(SOURCE,LGV,false )
	] 

	Plan init normal [
 		javaRun it.e80.customGui.createCustomGui("400", "30", "500", "cyan")
	]
	switchTo lgvIdle
	
	Plan lgvIdle[
 		[ !? lgvId( LGV )] println( info( "STATE", LGV, "IDLE" ) )
 		//[ ?? again ]  println(  "GOING ON"  ) else endPlan "no more iterations"
	] 
	transition stopAfter 100000 
 		whenMsg  lgvReady_2  -> handlelgvReadyQuery 
 		          
	Plan handlelgvReadyQuery [            
		printCurrentMessage;  
 		[ !? lgvId( LGV )]  onMsg  lgvReady_2 : lgvReady_2(SOURCE,LGV,query ) -> 
								replyToCaller -m lgvReady_2 : lgvReady_2(SOURCE,LGV,true ) 		
	]    
	switchTo waitCommadToLoad
	
	Plan waitCommadToLoad[
		println("	LGV IS (STILL) WAITING FOR THE COMMAND TO LOAD " )
	]                 
	transition stopAfter 100000   
 		whenMsg lgvReady_2       -> checkLgvReady ,  //accept also requests for ready or reset
 		whenMsg lgvMoveLoad_3cmd -> handlelgvloadcmd
	finally repeatPlan  
          		
	Plan handlelgvloadcmd[ 
		println("LGV MUST MOVE FROM PARKING TO SOURCE ");
		//printCurrentMessage;   
		actorOp simulateActionAsynch("simulateMoveToSource",950)
	]
	switchTo movingToSource
	
	Plan movingToSource[
		println("	LGV IS (STILL) MOVING FROM PARKING TO SOURCE ")
  		//printCurrentMessage
	] 
	transition stopAfter 600000    
		whenMsg lgvReady_2 -> checkLgvReady ,
 		whenMsg endAction  -> movingToLoadEnd
    finally repeatPlan	//when checkLgvReady resumeLastPlan

	Plan movingToLoadEnd[
		println("LGV HAS REACHED THE  SOURCE. Now sends lgvLoaded_3a "); 
		//printCurrentMessage;		//endAction
		//[ !? msg(A,B,SENDER,D,lgvMoveLoad_3cmd(LGV,SOURCE),F) ] println( msg(A,B,SENDER,D,lgvMoveLoad_3cmd(LGV,SOURCE),F) ) ;
  		[ ?? msg(A,B,SENDER,D,lgvMoveLoad_3cmd(LGV,SOURCE),F) ] 
  				forward SENDER -m lgvLoaded_3a : lgvLoaded_3a(LGV,SOURCE,material) 
	]
	transition stopAfter 100000  
		whenMsg lgvReady_2 -> checkLgvReady ,
		whenMsg lgvMoveWhareh_7cmd -> handlelgvmovetodest
 	
	Plan handlelgvmovetodest [
		println("LGV MUST MOVE TO THE WHAREHOUSE");
 		memoCurrentMessage ;	//REMEMBER THE COMMAND 
		actorOp simulateActionAsynch("simulateMoveToDest",1000)
 	]
 	switchTo movingToDest
 	
 	Plan movingToDest[
 		println("	LGV IS  (STILL) MOVING TO THE WHAREHOUSE")
 	]
	transition stopAfter 600000
		//no reset is possible here
		//whenMsg lgvReady_2 : lgvReady_2(SOURCE,LGV,query ) do replyToCaller -m lgvReady_2 : lgvReady_2(SOURCE,LGV,false ),
		whenMsg lgvReady_2 -> checkLgvReady,
		whenMsg endAction  -> movingToDestEnd 
 	finally repeatPlan	 	
 		
	Plan movingToDestEnd[  
		println("LGV HAS REACHED THE WHAREHOUSE"); 
		//[ !? msg(A,B,C,D,E,F)  ]  println( msg(A,B,C,D,E,F) );
		[ ?? msg(lgvMoveWhareh_7cmd,B,SENDER,D,lgvMoveWhareh_7cmd(LGV,SOURCE,DEST),F)  ]  
						forward SENDER -m lgvStore_7a : lgvStore_7a(LGV,SOURCE,DEST,done)
	] 
	switchTo gotoDeposit
	   
	Plan gotoDeposit[
		println("LGV IS MOVING TO THE PARKING AREA ");
		actorOp simulateActionAsynch("simulateMoveToDeposit",1100)
	]
	switchTo movingToDeposit
	
	Plan movingToDeposit[  
		println("	LGV IS (STILL) MOVING TO ITS PARKING ")
	]
	transition stopAfter 20000    
   		whenMsg lgvReady_2   -> checkLgvReady,
		whenMsg  endAction   -> lgvIdle 	 
 	finally repeatPlan
 }

 


/*
 * ------------------------------------
 * SIMULATOR OF AN EXTERNAL ENVIRONMENT
 * ------------------------------------
*/  


QActor plant context ctxE80CaseStudy{
	Plan init normal [ println("plant STARTS") ]
	switchTo doWork
	
	Plan doWork[
//		delay 100; 
//		emit sourceEngaged : sourceEngaged( s1 ) ;
//		delay 7000;
//		emit sourceEngaged : sourceEngaged( s2 ) 		
	]
	
}


/*
 * LEGENDA
 *
 * lgv     = LASER GUIDED VEHICLE 
 * lgvman  = lgv MANAGER
 * smarttm = SMART TRAFFIC MANAGER
 * sdm     = SMART DECSION MAKER
 * 
 * lgvtaker = lgv che trasporta materiale da una sorgente al magazzino

================================================================================
  	 * lgvman:
	 * 		when material on source
	 * 		invia a smarttm un msg (qLoad_1 ??):
	 * smarttm :
	 * 		quando riceve qLoad_1, trova un LGV disponibile (lgvtaker)
	 * 		attende un avviso di ok (lgvtakerReady) da parte di lgvtaker 
 	 * 		invia a lgvman il msg s200LgvReady
	 * lgvman:	
	 * 		quando riceve s200LgvReady, 
	 * 		invia a smarttm un msg (m200LoadConfirmed_3)
	 * smarttm :
 	 * 		pilota lgvtaker verso  pxSource (calcola path , analizza traffico)
	 * 		attende che lgvtaker arrivi e sia caricato 
	 * 		invia a lgvman il msg di carico preso in consegna (s300LgvLoaded_4)	
	 * lgvman:
	 * 		quando arriva s300LgvLoaded_4 invia a sdm pkup_5
	 * sdm:
	 * 		quando riceve pkup_5, crea missione  trovando dest-wharehouse
	 * 		invia a lgvman il messaggio di missione nmis_6 (da source a dest-wharehouse)
	 * lgvman:
	 * 		quando riceve nmis_6 invia a smarttm il msg m100Mission_7
	 * smarttm:
	 * 		quando riceve m100Mission_7
	 * 		calcola path , analizza traffico
	 * 		sposta lgvtaker verso la destinazione dest-wharehouse
	 * 		....
 	 *    
*/
