/* Generated by AN DISI Unibo */ 
/*
This code is generated only ONCE
*/
package it.unibo.qaled;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Panel;
import alice.tuprolog.SolveInfo;
import it.unibo.bls.highLevel.interfaces.IDevLed;
import it.unibo.bls.highLevel.interfaces.IDevLed.LedColor;
import it.unibo.bls.lowLevel.interfaces.IDeviceLedImpl;
import it.unibo.buttonLed.components.LedMock;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.QActorContext;

public class Qaled extends AbstractQaled { 
	public Qaled(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
		super(actorId, myCtx, outEnvView);
	}
/*
 * ADDED BY THE APPLICATION DESIGNER	
 */
	private Panel pled = new Panel( );	
	private IDeviceLedImpl led ;	//MUCH BETTER

 	public void createLedPojo(){
		//just to build a first prototype
		 createLedMock();
		 createLedGui();
//		 ledSwitch();
	}
	protected void  createLedMock(){
		try {
			led = new LedMock("led1", this.outEnvView, LedColor.RED);
		} catch (Exception e) {
 			e.printStackTrace();
		}
	}
	protected void createLedGui(){
 		outEnvView.getEnv().addPanel(pled);
 		pled.setBackground(Color.red);
  		pled.setSize( new Dimension(30,30) );	//on
 		println("createLedGui done");
   	}	
 	public void ledSwitch(){
		led.doSwitch();
//  		pled.setSize( new Dimension(20,20) );	//invalidates the hierarchy
		if( led.isOn() ) {
			pled.setSize( new Dimension(30,30) );
//			pled.setBackground(Color.red);	//on
		}
		else {
			pled.setSize( new Dimension(10,10) );
			pled.setBackground(Color.red);					//off
		}
		memoLedState( led.isOn() );		
	}

 
 	public void memoLedState(boolean ledState){
		String goal = "assign(ledState,"+ledState+")";
		SolveInfo sol = solveGoal( goal );	
		//System.out.println("memoLedState " + sol );
	}
	
}
