System testRover 
Event sonarDetect    : sonarDetect(X) //From (virtual robot) sonar
Event sonar          : sonar(SONAR, TARGET, DISTANCE) //From (virtual) sonar  

Context  ctxRover  ip [ host="localhost"  port=8070 ]         
EventHandler evh for  sonarDetect , sonar -print ;   

QActor rover context ctxRover { 
	Plan init normal [    
	    	println("rover START");	    	
	    	connectUnity "localhost";
	    	createUnityObject "rover" ofclass "Prefabs/CustomActor" ;
// 	    	actorOp workWithUnity("localhost") ;  
// 	   		actorOp createSimulatedActor("rover","Prefabs/CustomActor")  ;	
 			backwards 70 time ( 800 ) ;    	
   	    	right 50 time ( 1000 )   //position
  	    ] 
	    switchTo moveVitualRobot   
		
	Plan moveVitualRobot [
//		println("moveVitualRobot")
	]
	reactive onward 40 time ( 5000 )      
	    	whenEnd -> endOfMove
	    	whenTout 30000 -> handleTout
	    	whenEvent sonarDetect -> handleObstacle 
	    	or whenEvent sonar    -> handleSonar
	finally repeatPlan
	 
	Plan handleSonar resumeLastPlan [
//   	    onward 40 time ( 200 ) ;   //out of sonar range
   	    stop  0 time ( 500 )      //stop for a while ...
	]	
	Plan handleObstacle resumeLastPlan [ backwards 50 time ( 2500 ) ]
	Plan endOfMove resumeLastPlan [ println("endOfMove") ]
	Plan handleTout   [ println("handleTout") ]
		
 }
