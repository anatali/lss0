/* Generated by AN DISI Unibo */ 
package it.unibo.rover;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractRover extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractRover(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/rover/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");		
			this.planFilePath = "./srcMore/it/unibo/rover/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("moveVitualRobot",moveVitualRobot);
	    	stateTab.put("handleSonar",handleSonar);
	    	stateTab.put("moveFar",moveFar);
	    	stateTab.put("moveNear",moveNear);
	    	stateTab.put("handleObstacle",handleObstacle);
	    	stateTab.put("endOfMove",endOfMove);
	    	stateTab.put("handleTout",handleTout);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "rover tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "\"rover START\"";
	    	println( temporaryStr );  
	    	initUnityConnection("localhost");
	    	createSimulatedActor("rover", "Prefabs/CustomActor"); 
	    	//ConnectToPublish
	    	connectToSend( this.getName(), "tcp://localhost:1883", "unibo/mqtt/radar");
	    	execUnity("rover","backward",800, 70,0); //rover: default namefor virtual robot		
	    	execUnity("rover","right",1000, 70,0); //rover: default namefor virtual robot		
	    	//switchTo moveVitualRobot
	        switchToPlanAsNextState(pr, myselfName, "rover_"+myselfName, 
	              "moveVitualRobot",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun moveVitualRobot = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_moveVitualRobot",0);
	     pr.incNumIter(); 	
	    	String myselfName = "moveVitualRobot";  
	    	Callable<String> body;
	    int ractionTimeOut=0;
	    ractionTimeOut = 30000;
	    body= new Callable<String>(){
	    	public String call() throws Exception {
	      				execUnity("rover","forward",5000, 40,0); //rover: default namefor virtual robot		
	    			return currentActionResult;
	    		}		
	    		}; 
	    		terminationEvId = QActorUtils.getNewName(IActorAction.endBuiltinEvent);
	    currentTimedAction = new ActorTimedAction("ra_"+terminationEvId,this,myCtx,body,false,
	    			terminationEvId, new String[]{}, outEnvView, ractionTimeOut	);
	    currentTimedAction.execASynch();
	      	//aaa
	    msgTransition( pr,myselfName,"rover_"+myselfName,false,
	          new StateFun[]{stateTab.get( "endOfMove"),stateTab.get( "handleObstacle"),stateTab.get( "handleSonar")},
	          new String[]{"true","E",terminationEvId,"true","E","sonarDetect","true","E","sonar"},
	          ractionTimeOut, "handleTout" );
	    }catch(Exception e_moveVitualRobot){  
	    	 println( getName() + " plan=moveVitualRobot WARNING:" + e_moveVitualRobot.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//moveVitualRobot
	    
	    StateFun handleSonar = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleSonar",-1);
	    	String myselfName = "handleSonar";  
	    	temporaryStr = "\"handleSonar\"";
	    	println( temporaryStr );  
	    	execUnity("rover","stop",500, 0,0); //rover: default namefor virtual robot		
	    	//onEvent  
	    	curT = Term.createTerm("sonar(SOURCE,TARGET,DISTANCE)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("sonar") && 
	    		pengine.unify(curT, Term.createTerm("sonar(SONAR,TARGET,DISTANCE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="input(SOURCE,DISTANCE)";
	    			/* AddRule */
	    			parg = updateVars(Term.createTerm("sonar(SONAR,TARGET,DISTANCE)"),  Term.createTerm("sonar(SOURCE,TARGET,DISTANCE)"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) addRule(parg);	    		  					
	    	}
	    	//onEvent  
	    	curT = Term.createTerm("sonar(sonar1,TARGET,DISTANCE)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("sonar") && 
	    		pengine.unify(curT, Term.createTerm("sonar(SONAR,TARGET,DISTANCE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			/* SwitchTransition */
	    			String parg = "moveFar";
	    			parg =  updateVars( Term.createTerm("sonar(SONAR,TARGET,DISTANCE)"), 
	    				                Term.createTerm("sonar(sonar1,TARGET,DISTANCE)"), 
	    				                Term.createTerm(currentEvent.getMsg()), parg);
	    			if(parg != null){ 
	    				switchToPlanAsNextState(pr, myselfName, "console_"+myselfName, 
	    			    	 		    		parg,false, true, null); 
	    			    return;	
	    			    //the control is given to the caller state
	    			}
	    	}
	    	//onEvent  
	    	curT = Term.createTerm("sonar(sonar2,TARGET,DISTANCE)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("sonar") && 
	    		pengine.unify(curT, Term.createTerm("sonar(SONAR,TARGET,DISTANCE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			/* SwitchTransition */
	    			String parg = "moveNear";
	    			parg =  updateVars( Term.createTerm("sonar(SONAR,TARGET,DISTANCE)"), 
	    				                Term.createTerm("sonar(sonar2,TARGET,DISTANCE)"), 
	    				                Term.createTerm(currentEvent.getMsg()), parg);
	    			if(parg != null){ 
	    				switchToPlanAsNextState(pr, myselfName, "console_"+myselfName, 
	    			    	 		    		parg,false, true, null); 
	    			    return;	
	    			    //the control is given to the caller state
	    			}
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"rover_"+myselfName,false,true);
	    }catch(Exception e_handleSonar){  
	    	 println( getName() + " plan=handleSonar WARNING:" + e_handleSonar.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleSonar
	    
	    StateFun moveFar = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("moveFar",-1);
	    	String myselfName = "moveFar";  
	    	execUnity("rover","right",500, 70,0); //rover: default namefor virtual robot		
	    	execUnity("rover","forward",1000, 60,0); //rover: default namefor virtual robot		
	    	execUnity("rover","left",500, 70,0); //rover: default namefor virtual robot		
	    	repeatPlanNoTransition(pr,myselfName,"rover_"+myselfName,false,true);
	    }catch(Exception e_moveFar){  
	    	 println( getName() + " plan=moveFar WARNING:" + e_moveFar.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//moveFar
	    
	    StateFun moveNear = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("moveNear",-1);
	    	String myselfName = "moveNear";  
	    	execUnity("rover","left",500, 70,0); //rover: default namefor virtual robot		
	    	execUnity("rover","forward",1000, 60,0); //rover: default namefor virtual robot		
	    	execUnity("rover","right",500, 70,0); //rover: default namefor virtual robot		
	    	repeatPlanNoTransition(pr,myselfName,"rover_"+myselfName,false,true);
	    }catch(Exception e_moveNear){  
	    	 println( getName() + " plan=moveNear WARNING:" + e_moveNear.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//moveNear
	    
	    StateFun handleObstacle = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleObstacle",-1);
	    	String myselfName = "handleObstacle";  
	    	execUnity("rover","backward",2800, 80,0); //rover: default namefor virtual robot		
	    	repeatPlanNoTransition(pr,myselfName,"rover_"+myselfName,false,true);
	    }catch(Exception e_handleObstacle){  
	    	 println( getName() + " plan=handleObstacle WARNING:" + e_handleObstacle.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleObstacle
	    
	    StateFun endOfMove = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("endOfMove",-1);
	    	String myselfName = "endOfMove";  
	    	temporaryStr = "\"endOfMove\"";
	    	println( temporaryStr );  
	    	repeatPlanNoTransition(pr,myselfName,"rover_"+myselfName,false,true);
	    }catch(Exception e_endOfMove){  
	    	 println( getName() + " plan=endOfMove WARNING:" + e_endOfMove.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//endOfMove
	    
	    StateFun handleTout = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    	String myselfName = "handleTout";  
	    	temporaryStr = "\"handleTout\"";
	    	println( temporaryStr );  
	    	repeatPlanNoTransition(pr,myselfName,"rover_"+myselfName,false,false);
	    }catch(Exception e_handleTout){  
	    	 println( getName() + " plan=handleTout WARNING:" + e_handleTout.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleTout
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
