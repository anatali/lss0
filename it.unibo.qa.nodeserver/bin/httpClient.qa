System httpClient                 
Event httpinfo : httpinfo(X)     //emitted by PUT GET

Context ctxHttpClient ip [ host="localhost"  port=8049 ]  -g yellow 

/*
 * This actor exploits an HTTP client to send data to a server 
 */ 
QActor qahttpclient context ctxHttpClient  {  
Rules{
 	data( a ).	data( b ). 	data( c ).  
}
	Plan init normal [         
// 		actorOp setConnection( "localhost",8080 )
		actorOp noOp
     ] 
//     switchTo interactWithWotServer 
//   	switchTo interactWithRestServer 
    	switchTo interactWithAServer 
	  
	
	Plan interactWithWotServer [  
		//actorOp setConnection( "localhost",8484 );
   		actorOp sendGet("http://localhost:8484/pi/actuators/leds") 	;
   		delay 400;
   		actorOp sendPut("{%value%:%true%}",  "http://localhost:8484/pi/actuators/leds/1");
   		delay 400;
   		actorOp sendGet("http://localhost:8484/pi/actuators/leds") 	;
   		delay 400;
   		actorOp sendPut("{%value%:%true%}",  "http://localhost:8484/pi/actuators/leds/2");
   		delay 400;
   		actorOp sendGet("http://localhost:8484/pi/actuators/leds") 	
    ] 
	
	Plan interactWithAServer  [
		actorOp sendPut( "a", "http://localhost:8080" );
		delay 1000;
		actorOp sendGet(  "http://localhost:8080" )
	]
	
	Plan interactWithRestServer  [         
//		println( "qahttpclient working ... "  )  ;
 		actorOp sendGet ;   // emits httpinfo 	
		[ not !? data(X) ]  endPlan "qahttpclient ends"  
    ] 
    switchTo [ !? data(X) ] putData  
    finally repeatPlan

	Plan putData resumeLastPlan [         
    	delay 500 ;
   		[ ?? data(X) ] actorOp sendPut( X ) else endPlan "no more data"
    ] 
    finally repeatPlan
    
} 

QActor qahttpanswerhandler context ctxHttpClient  {
	Plan init normal [
		println("qahttpanswerhandler waiting httpinfo ...")
		//actorOp noOp  
	]
   	transition stopAfter 1200000 
   		whenEvent httpinfo : httpinfo(X) do println( fromServerAnswer(X) )
   		finally repeatPlan
}