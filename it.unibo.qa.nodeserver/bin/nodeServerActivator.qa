/*
 * nodeServerActivator.qa
 * -------------------------------------------------------------------------------
 * Activates a node server that work on port 8080.
 * The server connects itself via TCP with the ctxNodeServerActivator (port 8071)
 * and emits a serverCmd : usercmd(X) event for each GET or PUT/POST request.
 * An eventhandler converts each serverCmd event into a serverCmd dispatch
 * sent to the internal actor qaservercmds.
 * The actor qaservercmds handles the serverCmd events and sends an answer to the
 * node server.
 * 
 * To send PUT/POST request we can use curl, POSTMAN or the httpClinet
 * The node server stores the data sent via  PUT/POST into an internal structure
 * To GET the data we can use a normal browser
 */
System nodeServerActivator
Event   usercmd    : usercmd(X)
Dispatch serverCmd : usercmd(X)
Dispatch answer    : answer(X)

Context ctxNodeServerActivator  ip[ host="localhost" port=8071]  

EventHandler evh for usercmd -print {	
 	forwardEvent qaservercmds -m serverCmd 	//to avoid event loss
};
  
QActor qaserveractivator context ctxNodeServerActivator  {
	Plan init normal [
		//actorOp runNodeJs("./node/NodeServerCrud.js localhost 8071" , "true");
//		nodeOp "./node/NodeServerCrud.js localhost 8071" -o;
		println("qaserveractivator STARTED")
	]
}  

QActor qaservercmds context ctxNodeServerActivator  {
	Plan init normal [ println("qaservercmds STARTED") ] 
   	transition stopAfter 3600000 //1hour  
   		whenMsg serverCmd ->  handleServerCmd
   		finally repeatPlan
   		
   	Plan handleServerCmd resumeLastPlan[
   		printCurrentMessage ;
   		onMsg serverCmd : usercmd(X) -> println( data(X) ) ;
    	onMsg serverCmd : usercmd(X) -> actorOp sendAnswer(X)
   	]
}
