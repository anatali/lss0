/* Generated by AN DISI Unibo */ 
package it.unibo.musicreactiveasycnh;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractMusicreactiveasycnh extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractMusicreactiveasycnh(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/musicreactiveasycnh/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");		
			this.planFilePath = "./srcMore/it/unibo/musicreactiveasycnh/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("handleActionEnd",handleActionEnd);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "musicreactiveasycnh tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	parg = "fibonacciActorTest(\"actionFibo\",20)"; 
	    	actorOpExecute(parg, false);	//OCT17		 
	    	playTheSound( "./audio/illogical_most2.wav", 3000 );
	    	playSoundAsynch( "./audio/music_interlude20.wav", 15000 );
	    	playTheSound( "./audio/computer_complex3.wav", 3000 );
	    	temporaryStr = "\"musicreactive init END\"";
	    	println( temporaryStr );  
	    	//switchTo handleActionEnd
	        switchToPlanAsNextState(pr, myselfName, "musicreactiveasycnh_"+myselfName, 
	              "handleActionEnd",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun handleActionEnd = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_handleActionEnd",0);
	     pr.incNumIter(); 	
	    	String myselfName = "handleActionEnd";  
	    	//bbb
	     msgTransition( pr,myselfName,"musicreactiveasycnh_"+myselfName,false,
	          new StateFun[]{
	          () -> {	//AD HOC state to execute an action and resumeLastPlan
	          try{
	            PlanRepeat pr1 = PlanRepeat.setUp("adhocstate",-1);
	            //ActionSwitch for a message or event
	             if( currentMessage.msgContent().startsWith("endAction") ){
	            	String parg = "endActionMsg(A,R)";
	            	/* Print */
	            	parg =  updateVars( Term.createTerm("endAction(A,R)"), 
	            	                    Term.createTerm("endAction(A,R)"), 
	            		    		  	Term.createTerm(currentMessage.msgContent()), parg);
	            	if( parg != null ) println( parg );
	             }
	            repeatPlanNoTransition(pr1,"adhocstate","adhocstate",false,true);
	          }catch(Exception e ){  
	             println( getName() + " plan=handleActionEnd WARNING:" + e.getMessage() );
	             //QActorContext.terminateQActorSystem(this); 
	          }
	          },
	           
	          () -> {	//AD HOC state to execute an action and resumeLastPlan
	          try{
	            PlanRepeat pr1 = PlanRepeat.setUp("adhocstate",-1);
	            //ActionSwitch for a message or event
	             if( currentMessage.msgContent().startsWith("endActorOp") ){
	            	String parg = "endActorMsg(R)";
	            	/* Print */
	            	parg =  updateVars( Term.createTerm("endActorOp(A,R)"), 
	            	                    Term.createTerm("endActorOp(actionFibo,R)"), 
	            		    		  	Term.createTerm(currentMessage.msgContent()), parg);
	            	if( parg != null ) println( parg );
	             }
	            repeatPlanNoTransition(pr1,"adhocstate","adhocstate",false,true);
	          }catch(Exception e ){  
	             println( getName() + " plan=handleActionEnd WARNING:" + e.getMessage() );
	             //QActorContext.terminateQActorSystem(this); 
	          }
	          }
	          },//new StateFun[]
	          new String[]{"true","M","endAction", "true","M","endActorOp" },
	          7000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_handleActionEnd){  
	    	 println( getName() + " plan=handleActionEnd WARNING:" + e_handleActionEnd.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleActionEnd
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
