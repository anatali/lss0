/* Generated by AN DISI Unibo */ 
package it.unibo.qaledhlreactive;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
import it.unibo.baseEnv.basicFrame.EnvFrame;
import alice.tuprolog.SolveInfo;
import it.unibo.is.interfaces.IActivity;
import it.unibo.is.interfaces.IIntent;
public abstract class AbstractQaledhlreactive extends QActor implements IActivity{ 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			EnvFrame env = new EnvFrame( "Env_qaledhlreactive", java.awt.Color.cyan  , java.awt.Color.black );
			env.init();
			env.setSize(800,430); 
			IOutputEnvView newOutEnvView = ((EnvFrame) env).getOutputEnvView();
			return newOutEnvView;
		}
		public AbstractQaledhlreactive(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/qaledhlreactive/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");		
			addInputPanel(80);
			addCmdPanels();	
			this.planFilePath = "./srcMore/it/unibo/qaledhlreactive/plans.txt";
	  	}
	protected void addInputPanel(int size){
		((EnvFrame) env).addInputPanel(size);			
	}
	protected void addCmdPanels(){
		((EnvFrame) env).addCmdPanel("input", new String[]{"INPUT"}, this);
		((EnvFrame) env).addCmdPanel("alarm", new String[]{"FIRE"}, this);
		((EnvFrame) env).addCmdPanel("help",  new String[]{"HELP"}, this);				
	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("waitForCmd",waitForCmd);
	    	stateTab.put("doLedCmd",doLedCmd);
	    	stateTab.put("doLedBlink",doLedBlink);
	    	stateTab.put("stopBlink",stopBlink);
	    	stateTab.put("endWork",endWork);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "qaledhlreactive tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?config(led,X)" )) != null ){
	    	temporaryStr = "X";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?config(led,X)" )) != null ){
	    	parg = "createLedObject(X)"; 
	    	parg = QActorUtils.substituteVars(guardVars,parg);
	    	actorOpExecute(parg, false);	//OCT17		 
	    	}
	    	//switchTo waitForCmd
	        switchToPlanAsNextState(pr, myselfName, "qaledhlreactive_"+myselfName, 
	              "waitForCmd",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun waitForCmd = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_waitForCmd",0);
	     pr.incNumIter(); 	
	    	String myselfName = "waitForCmd";  
	    	temporaryStr = "\"qaledhlreactive WAITS\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"qaledhlreactive_"+myselfName,false,
	          new StateFun[]{stateTab.get("doLedCmd") },//new StateFun[]
	          new String[]{"true","M","turn" },
	          3000000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitForCmd){  
	    	 println( getName() + " plan=waitForCmd WARNING:" + e_waitForCmd.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitForCmd
	    
	    StateFun doLedCmd = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("doLedCmd",-1);
	    	String myselfName = "doLedCmd";  
	    	//onMsg
	    	if( currentMessage != null && currentMessage.msgId().equals("turn") ){
	    		/* SwitchTransition */
	    		String parg = "doLedBlink";
	    		parg =  updateVars( Term.createTerm("turn(X)"), 
	    			                Term.createTerm("turn(blink)"), 
	    			                Term.createTerm(currentMessage.msgContent()), parg);
	    		if(parg != null){ 
	    			switchToPlanAsNextState(pr, myselfName, "console_"+myselfName, 
	    		    	 		    		parg,false, true, null); 
	    		    return;	
	    		    //the control is given to the caller state
	    		}
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"qaledhlreactive_"+myselfName,false,false);
	    }catch(Exception e_doLedCmd){  
	    	 println( getName() + " plan=doLedCmd WARNING:" + e_doLedCmd.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//doLedCmd
	    
	    StateFun doLedBlink = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("doLedBlink",-1);
	    	String myselfName = "doLedBlink";  
	    	parg = "setupLedBlink"; 
	    	actorOpExecute(parg, false);	//OCT17		 
	    	Callable<String> body;
	    int ractionTimeOut=0;
	    ractionTimeOut = 30000;
	    body= new Callable<String>(){
	    	public String call() throws Exception {
	      				parg = "ledBlink"; 
	      				actorOpExecute(parg, false);	//OCT17		 
	    			return currentActionResult;
	    		}		
	    		}; 
	    		terminationEvId = QActorUtils.getNewName(IActorAction.endBuiltinEvent);
	    currentTimedAction = new ActorTimedAction("ra_"+terminationEvId,this,myCtx,body,false,
	    			terminationEvId, new String[]{}, outEnvView, ractionTimeOut	);
	    currentTimedAction.execASynch();
	      	//aaa
	    msgTransition( pr,myselfName,"qaledhlreactive_"+myselfName,false,
	          new StateFun[]{stateTab.get( "endWork"),stateTab.get( "stopBlink")},
	          new String[]{"true","E",terminationEvId,"true","E","usercmd"},
	          ractionTimeOut, "endWork" );
	    }catch(Exception e_doLedBlink){  
	    	 println( getName() + " plan=doLedBlink WARNING:" + e_doLedBlink.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//doLedBlink
	    
	    StateFun stopBlink = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("stopBlink",-1);
	    	String myselfName = "stopBlink";  
	    	parg = "ledblinkstop"; 
	    	actorOpExecute(parg, false);	//OCT17		 
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "ledstate(V)","ledstate(ready)", guardVars ).toString();
	    	emit( "local_ledstate", temporaryStr );
	    	//switchTo waitForCmd
	        switchToPlanAsNextState(pr, myselfName, "qaledhlreactive_"+myselfName, 
	              "waitForCmd",false, false, null); 
	    }catch(Exception e_stopBlink){  
	    	 println( getName() + " plan=stopBlink WARNING:" + e_stopBlink.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//stopBlink
	    
	    StateFun endWork = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("endWork",-1);
	    	String myselfName = "endWork";  
	    	temporaryStr = "\"qaledhlreactive ends\"";
	    	println( temporaryStr );  
	    	repeatPlanNoTransition(pr,myselfName,"qaledhlreactive_"+myselfName,false,false);
	    }catch(Exception e_endWork){  
	    	 println( getName() + " plan=endWork WARNING:" + e_endWork.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//endWork
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
		/* 
		* ------------------------------------------------------------
		* IACTIVITY (aactor with GUI)
		* ------------------------------------------------------------
		*/
		private String[] actions = new String[]{
		    	"println( STRING | TERM )", 
		    	"play('./audio/music_interlude20.wav'),20000,'alarm,obstacle', 'handleAlarm,handleObstacle'",
		"emit(EVID,EVCONTENT)  ",
		"move(MOVE,DURATION,ANGLE)  with MOVE=mf|mb|ml|mr|ms",
		"forward( DEST, MSGID, MSGCONTENTTERM)"
		    };
		    protected void doHelp(){
				println("  GOAL ");
				println("[ GUARD ], ACTION  ");
				println("[ GUARD ], ACTION, DURATION ");
				println("[ GUARD ], ACTION, DURATION, ENDEVENT");
				println("[ GUARD ], ACTION, DURATION, EVENTS, PLANS");
				println("Actions:");
				for( int i=0; i<actions.length; i++){
					println(" " + actions[i] );
				}
		    }
		@Override
		public void execAction(String cmd) {
			if( cmd.equals("HELP") ){
				doHelp();
				return;
			}
			if( cmd.equals("FIRE") ){
				emit("alarm", "alarm(fire)");
				return;
			}
			String input = env.readln();
			//input = "\""+input+"\"";
			input = it.unibo.qactors.web.GuiUiKb.buildCorrectPrologString(input);
			//println("input=" + input);
			try {
				Term.createTerm(input);
	 			String eventMsg=it.unibo.qactors.web.QActorHttpServer.inputToEventMsg(input);
				//println("QActor eventMsg " + eventMsg);
				emit("local_"+it.unibo.qactors.web.GuiUiKb.inputCmd, eventMsg);
	  		} catch (Exception e) {
		 		println("QActor input error " + e.getMessage());
			}
		}
	 	
		@Override
		public void execAction() {}
		@Override
		public void execAction(IIntent input) {}
		@Override
		public String execActionWithAnswer(String cmd) {return null;}
	}
