/* Generated by AN DISI Unibo */ 
package it.unibo.qaservercmds;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractQaservercmds extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractQaservercmds(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/qaservercmds/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");		
			this.planFilePath = "./srcMore/it/unibo/qaservercmds/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("handleServerCmd",handleServerCmd);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "qaservercmds tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_init",0);
	     pr.incNumIter(); 	
	    	String myselfName = "init";  
	    	parg = "noOp"; 
	    	actorOpExecute(parg, false);	//OCT17		 
	    	//bbb
	     msgTransition( pr,myselfName,"qaservercmds_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleServerCmd") },//new StateFun[]
	          new String[]{"true","M","serverCmd" },
	          3600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun handleServerCmd = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleServerCmd",-1);
	    	String myselfName = "handleServerCmd";  
	    	printCurrentMessage(false);
	    	//onMsg
	    	if( currentMessage != null && currentMessage.msgId().equals("serverCmd") ){
	    		String parg = "dddddddddddddddddddddddddddddddddd(X)";
	    		/* Print */
	    		parg =  updateVars( Term.createTerm("usercmd(X)"), 
	    		                    Term.createTerm("usercmd(X)"), 
	    			    		  	Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) println( parg );
	    	}
	    	//onMsg
	    	if( currentMessage != null && currentMessage.msgId().equals("serverCmd") ){
	    		String parg = "sendAnswer(X)"; //it.unibo.xtext.qactor.impl.MsgTransSwitchImpl@3f7a2b11
	    		{/* ActorOp */
	    		parg =  updateVars( Term.createTerm("usercmd(X)"), 
	    			                Term.createTerm("usercmd(X)"), 
	    			                Term.createTerm(currentMessage.msgContent()), parg);
	    		if(parg != null) actorOpExecute(parg, false); //JUNE2017 OCT17
	    		}
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"qaservercmds_"+myselfName,false,true);
	    }catch(Exception e_handleServerCmd){  
	    	 println( getName() + " plan=handleServerCmd WARNING:" + e_handleServerCmd.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleServerCmd
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
