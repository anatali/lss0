/*
 * actions.qa
 */  
System qaActions   
Event alarm         : alarm(X)
Dispatch endAction  : endAction(A,R)
Dispatch endActorOp : endActorOp(A,R)

/*
*/ 
Context ctxReactiveActions  ip[ host="localhost" port=8078 ]  //-g cyan
 
 QActor musicreactive context ctxReactiveActions{   
 	Plan init normal[     
  		actorOp fibonacciActorTest( "actionFibo", 20 )   ;  	//in QActor
      	sound time(5000) file("./audio/computer_process_info4.wav") -asynch   ;
  		println("musicreactive init END")		    
 	]    
   	reactive sound time(20000) file("./audio/music_interlude20.wav") 
   		whenEnd         -> handleActionEnd
   		whenTout 30000  -> handleTout     
   		whenEvent alarm -> handleAlarm 
   	 
  	Plan handleTout[ 
 		println("musicreactive tout" )
 	]
   	Plan handleAlarm [        
   		println("musicreactive handleAlarm" )  ;   
   		actorOp suspendCurrentAction;    
   		printCurrentEvent    		    
    ] 
    switchTo handleActionEnd
   	 
  	Plan handleActionEnd [  ] 
  	transition stopAfter 7000 
   		whenMsg endAction   : endAction(A,R)  do println( endActionMsg(A,R) ),
   		whenMsg endActorOp  : endActorOp(actionFibo,R) do  println( endActorMsg( R) )
   		finally repeatPlan    
  }
  
  QActor alarmemitter context ctxReactiveActions{
  	Plan init normal[ 
  		delay 3000 ;
  		println("alarmemitter EMITS" ) ;
  		emit alarm : alarm(fire)
  	]
  	
  }

