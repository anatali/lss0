/*
 * This is A MODEL, result of problem analysis 
 * written in the CUSTOM meta-model/language qa
 */  
System blsHlBlinkReactive 
Dispatch turn     		: turn(X)   
Event local_click 		: clicked(N)  	//N : natural
Event usercmd     		: usercmd(N)
Event local_ledstate    : ledstate(V)	//V=ready/blinking

Context ctxBlsHlBlimkreactive ip [ host="localhost"  port=8029 ]  -httpserver   
//EventHandler evconvert for usercmd -print {
//	emit local_click fromContent usercmd (N) to clicked(N) 
//};

QActor qaledhlreactive context ctxBlsHlBlimkreactive -g cyan {
Rules{
// 	config( led,  mock ).
  	config( led,  gui ).
//	config( led,  rasp ).  
}
	Plan init normal  [         
		[ !? config( led, X )] println( X )  ;
    	[ !? config( led, X )] actorOp createLedObject( X )  
    ]
   	switchTo waitForCmd   
   	  
  	Plan waitForCmd [  
  		println("qaledhlreactive WAITS")
  	]
    transition stopAfter 3000000
     	whenMsg turn -> doLedCmd
    finally repeatPlan	
    
    Plan doLedCmd [
    	onMsg turn : turn(blink)  -> switchTo doLedBlink
    ]
    
    Plan doLedBlink[
    	actorOp setupLedBlink
    ]
    reactive actorOp ledBlink
   		whenEnd               -> endWork
   		whenTout 30000        -> endWork    		
   		whenEvent usercmd     -> stopBlink 
   	
   	Plan stopBlink[
    	actorOp ledblinkstop ;
    	emit local_ledstate : ledstate(ready)
    ]
    switchTo waitForCmd
   	
   	Plan endWork[ println("qaledhlreactive ends") ]
}

/*
 * CONTROL
 * Converts a click of the button into a message for the led to blink
 * WARNING: each message is STORED !!!
 */  
QActor qacontrolhlblinkreactive context ctxBlsHlBlimkreactive {
	Plan init normal [         
   		actorOp createButtonObject("gui", "start") //must emit local_click
   	]
   	switchTo waitForClick       
 
    Plan waitForClick[
     	println("qacontrolhlblink waitForClick") ;
    	actorOp showTheButton 
     ]  
    transition stopAfter 100000 
     	whenEvent local_click -> activateTheLed 
    finally repeatPlan  
    
    Plan activateTheLed resumeLastPlan[
    	actorOp hideTheButton ;
    	forward qaledhlreactive -m turn : turn(blink)
    ]
    transition stopAfter 3000000
     	whenEvent local_ledstate : ledstate(ready) do switchTo waitForClick
//    finally repeatPlan	
 }
     
