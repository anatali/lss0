/*
 * blsHlBlinkReactiveWeb.qa
 * --------------------------------------------------------------
 * The system provides a button that generates the event cmd : cmd(X)
 * When it perceives the event, the system starts blinking a led
 * The blinking action must be 'interrupted' when an alarm event is raised 
 */  
System blsHlBlinkReactiveWeb 
Event cmd     : cmd(V)			//V : start/stop
Event alarm   : alarm(V)		//V : fire 
 
Context ctxBlsHlBlimkreactiveWeb ip [ host="localhost"  port=8029 ] // -httpserver   
 
QActor qaledhlreactiveweb context ctxBlsHlBlimkreactiveWeb   {
Rules{
   	config( led,  gui ). 
//  config( led,  rasp ). 
}
	Plan init normal  [         
    	[ !? config( led, gui )] 
    		javaOp "it.unibo.custom.led.LedFactory.createLedWithGui(\"l1\", this)"
    ]
   	switchTo waitForCmd    
   	  
  	Plan waitForCmd [  
  		println("qaledhlreactiveweb WAITS")
  	]
    transition stopAfter 3000000
     	whenEvent cmd : cmd(start) do switchTo doLedBlink
    finally repeatPlan	
     
    Plan doLedBlink[ ]
    reactive javaOp "it.unibo.custom.led.LedFactory.ledBlink(\"l1\" )"
   		whenEnd               -> endWork
   		whenTout 30000        -> endWork    		
   		whenEvent alarm       -> stopBlink 
   	    
    Plan stopBlink[
    	println("qaledhlreactiveweb stopBlink") ;
      	actorOp suspendCurrentAction
    ]   
    switchTo waitForCmd
   	
   	Plan endWork[ 
   		println("qaledhlreactive ends") ;
   		delay 3000
   	]
}
