/* Generated by AN DISI Unibo */ 
/*
This code is generated only ONCE
*/
package it.unibo.qaledhlreactive;
import alice.tuprolog.SolveInfo;
import it.unibo.baseEnv.basicFrame.EnvFrame;
import it.unibo.bls.highLevel.interfaces.IDevLed;
import it.unibo.bls.highLevel.interfaces.IDevLed.LedColor;
import it.unibo.bls.lowLevel.interfaces.IDeviceLedImpl;
import it.unibo.buttonLed.components.DevLed;
import it.unibo.buttonLed.components.DeviceLedMock;
import it.unibo.buttonLedSystem.gui.components.DeviceLedGui;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.QActorContext;

public class Qaledhlreactive extends AbstractQaledhlreactive { 
	public Qaledhlreactive(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
		super(actorId, myCtx, outEnvView);
	}
/*
 * ADDED BY THE APPLICATION DESIGNER	
 */
	private IDevLed ledHighlevel ;	
	private IDeviceLedImpl ledLowLevel;
	
	public void  createLedObject(String devType){
		if(  devType.equals("gui")) createLedObjecGui();
		else if(  devType.equals("mock")) createLedObjecMock();
		if( env != null) {	//env is null if we use mock
			((EnvFrame) env).setSize(350, 300);
			((EnvFrame) env).setLocation(400, 150);
		}
		//ledswitch to call memoLedState for testing
		ledSwitch(); //on
		ledSwitch(); //off
 	}
	
	public void   createLedObjecMock(){
		try {
			ledHighlevel = new DevLed("led1",outEnvView);
			ledLowLevel  = new DeviceLedMock("led1gui", outEnvView, LedColor.RED);
			ledHighlevel.setDevImpl(ledLowLevel);	
		} catch (Exception e) {
 			e.printStackTrace();
		}
	}
	public void  createLedObjecGui(){
		try {
 			ledLowLevel  = new DeviceLedGui("led1gui", outEnvView, LedColor.RED);
			ledHighlevel = new DevLed("led1",outEnvView);
			ledHighlevel.setDevImpl(ledLowLevel);	
 		} catch (Exception e) {
 			e.printStackTrace();
		}
	}
  	public void ledSwitch(){
//   		println("ledSwitch " + ledHighlevel.isOn() );
   		ledHighlevel.doSwitch();
 		memoLedState( ledHighlevel.isOn() );		
//  		println("AFTER ledSwitch=" + ledHighlevel.isOn() );
 	}

  	boolean goon = false;
  	
  	public void setupLedBlink() {
//  		println("setupLedBlink");
  		goon = true;
  	}
  	public void ledBlink(){
//  		println("ledBlink STARTS");
   		while( goon ) {
  			ledSwitch();
  			this.waitfor(500);
  		}
//  		println("ledBlink ENDS ");
 	}
  	
  	public void ledblinkstop(){
//  		println("ledblinkstop");
  		goon = false;
  	}
  	
 	public void memoLedState(boolean ledState){
		String goal = "assign(ledState,"+ledState+")";
//		System.out.println("memoLedState " + goal );
		SolveInfo sol = solveGoal( goal );	
	}	
  	
  	/*
  	 * EXCLUDE built-in panels
   	 */
    //@Override  EXCLUDE Override since these methods do not exist in env==null
	protected void addInputPanel(int size){ 	}
    //@Override
	protected void addCmdPanels(){ 	}
	
}
