/*
 * This is A MODEL, result of problem analysis 
 * written in the CUSTOM meta-model/language qa
 */  
System blshlBlink 
Dispatch turn     : switch   
Event local_click : clicked(N)  //N : natural
Event usercmd     : usercmd(N)

Context ctxBlsHlBlimk ip [ host="localhost"  port=8029 ]  -httpserver   
EventHandler evconvert for usercmd -print {
	emit local_click fromContent usercmd (N) to clicked(N) 
};

QActor qaledhl context ctxBlsHlBlimk -g cyan {
Rules{
// 	config( led,  mock ).
  	config( led,  gui ).
//	config( led,  rasp ).  
//	config( led,  arduino ).
}
	Plan init normal  [         
		[ !? config( led, X )] println( X )  ;
    	[ !? config( led, X )] actorOp createLedObject( X )  
    ]
   	switchTo waitForCmd   
   	  
  	Plan waitForCmd [  
  		println("LED WAITS")
  	]
    transition stopAfter 3000000
    	whenMsg turn : switch do actorOp ledSwitch
    finally repeatPlan	
}
 
QActor qacontrolhlblink context ctxBlsHlBlimk {
	Plan init normal [         
   		actorOp createButtonObject("gui") //must emit local_click
   	]
   	switchTo waitForClick       
 
    Plan waitForClick[
//     	addRule blinkEnabled  ;
    	printCurrentEvent;
     	println("qacontrolhlblink waitForClick") 
    ]  
    transition stopAfter 100000 
     	whenEvent local_click -> blink
    finally repeatPlan	 
    
    Plan blink resumeLastPlan[
//      	 printCurrentEvent;
//    	 [ !? blinkEnabled ] println("blink") ;
//    	 [ !? blinkEnabled ] 
    	 forward qaledhl -m turn : switch //else endPlan "endBlink"
    ]
    transition whenTime 300   ->  continueblink 
     	whenEvent local_click ->  terminateblink
    finally repeatPlan	
     
    Plan terminateblink [
    	println("terminateblink")
//   	 	printCurrentEvent;
//     	removeRule blinkEnabled
    ]
    switchTo waitForClick
    
    Plan continueblink resumeLastPlan[	
     	actorOp noOP   
//     	forward qaledhl -m turn : switch
    ]
}
     
